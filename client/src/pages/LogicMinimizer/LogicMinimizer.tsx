import InputsSettings from './components/InputsSettings/InputsSettings';
import MinimizeReport from './components/MinimizeReport/MinimizeReport';
import KarnaughMapViewer from './components/KarnaughMapViewer/KarnaughMapViewer';
import MinimizedResult from './components/MinimizedResult/MinimizedResult';
import { JSX, useCallback, useEffect, useMemo, useState } from 'react';
import { TruthTableRow } from '@/shared/types/truth-table';
import Table from '@/shared/components/table/table';
import { createTableColumnsConfig } from '@/shared/utils/table-utils';
import { convertBinaryToHex } from '@/shared/utils/convertBinaryToHex';
import { generateTableConfig, generateValidationReport } from './LogicMinimizer.config';
import AutoGeneratedGateLayout from './components/AutoGeneratedGateLayout/AutoGeneratedGateLayout';
import { MinimizedFunction } from './LogicMinimizer.model';
import { LogicGateTypeName } from '@/shared/enums/LogicGate';
import Button, { ButtonVariant } from '@/shared/components/button/Button';
import { exportTruthTableToCSV } from '@/shared/utils/exportTruthTableToCSV';
import { LogicMinimizerTranslate } from './LogicMinimizer.enum';
import { useLocation } from 'react-router-dom';
import { useFallbackTranslation } from '@/hooks/useFallbackTranslation';
import { useLogicMinimizerStore } from './store/useLogicMinimizerStore';
import { exportFile } from '@/shared/services/file-export.service';

const { INPUT, OUTPUT } = LogicGateTypeName;

const LogicMinimizer: React.FC = () => {
  const [minimizeTriggered, setMinimizeTriggered] = useState<boolean>(false);
  const [minimizedFunctions, setMinimizedFunctions] = useState<MinimizedFunction[]>([]);
  const [validationReport, setValidationReport] = useState<JSX.Element[]>([]);
  const [isTableValid, setIsTableValid] = useState<boolean>(false);

  const { updateTableColumns, updateTableData } = useLogicMinimizerStore();
  const tableData = useLogicMinimizerStore((state) => state.tableData ?? {});
  const tableColumns = useLogicMinimizerStore((state) => state.tableColumns ?? {});
  const formValues = useLogicMinimizerStore((state) => state.formValues ?? {});

  const location = useLocation();
  const currentPath = location.pathname === '/' ? 'dashboard' : location.pathname.replace(/^\//, '');

  const { t } = useFallbackTranslation(currentPath);

  const tableConfig = useMemo(
    () => createTableColumnsConfig(generateTableConfig(formValues.inputs ?? 1, formValues.outputs ?? 1, t), { prefix: 'table' }),
    [formValues]
  );

  useEffect(() => {
    updateTableColumns(tableConfig);
  }, [tableConfig, tableData, formValues.inputs, formValues.outputs]);

  const onAddNewRow = useCallback(
    (id: number) => {
      console.log(id);
      const row = { input: null, inputHex: null, output: null, outputHex: null, id: null };
      const newRow: TruthTableRow = Object.keys(row).reduce((acc, key) => {
        if (key === 'id') {
          (acc as any)[key] = id;
        } else {
          (acc as any)[key] = null;
        }
        return acc;
      }, {} as TruthTableRow);

      updateTableData([...tableData, newRow]);
    },
    [tableData]
  );

  const validateTableData = useCallback(() => {
    const [valid, report] = generateValidationReport(tableData, formValues.inputs ?? 1, formValues.outputs ?? 1);
    setValidationReport(report);
    setIsTableValid(valid);
    return valid;
  }, [tableData, formValues]);

  const handleTableDataUpdate = useCallback((newData: TruthTableRow[]) => {
    const updated = newData.map((row) => {
      const updatedRow = { ...row };
      if (INPUT in row && typeof row.input === 'string') updatedRow.inputHex = convertBinaryToHex(row.input);
      if (OUTPUT in row && typeof row.output === 'string') updatedRow.outputHex = convertBinaryToHex(row.output);

      return updatedRow;
    });

    updateTableData(updated);
  }, []);

  const handleMinimize = useCallback(() => {
    setMinimizeTriggered(true);
  }, []);

  const handleMinimizeReport = useCallback(() => validateTableData(), [validateTableData]);

  const handleMinimizationResult = useCallback((results: MinimizedFunction[]) => {
    setMinimizedFunctions((prev) => {
      const isEqual = JSON.stringify(prev) === JSON.stringify(results);
      return isEqual ? prev : results;
    });
  }, []);

  const handleExport = useCallback(() => {
    const csv = exportTruthTableToCSV(tableData, formValues.inputs ?? 1, formValues.outputs ?? 1);
    exportFile(csv, 'text/csv', 'truth-table.csv');
  }, []);

  const handleResetMinimizeLogic = useCallback(() => {
    setValidationReport([]);
    setMinimizeTriggered(false);
  }, []);

  useEffect(() => {
    handleResetMinimizeLogic();
  }, []);

  return (
    <div className="p-8 d-flex flex-column gap-16">
      <InputsSettings />

      <div className="d-block">
        <Table
          columns={tableColumns ?? []}
          totalRecords={tableData?.length ?? 0}
          value={tableData ?? []}
          allowFilters={true}
          quantity={5}
          range={[5, 50, 5]}
          isSizeXs={true}
          isTransparency={false}
          setTableData={(data) => handleTableDataUpdate(data as TruthTableRow[])}
          onAddNewRow={onAddNewRow}
          isEdit={true}
          isColumnLp={true}
        />
      </div>

      <div className="d-flex gap-16">
        <Button variant={ButtonVariant.PRIMARY} name={LogicMinimizerTranslate.EXPORT_BTN} handleClick={handleExport} />
        <Button
          variant={ButtonVariant.PRIMARY}
          handleClick={() => {
            const isValid = handleMinimizeReport();
            if (isValid) handleMinimize();
          }}
          disabled={!tableData.length}
        >
          Minimize Logic
        </Button>
        <Button
          variant={ButtonVariant.PRIMARY}
          name={'Reset Minimize Logic'}
          handleClick={handleResetMinimizeLogic}
          disabled={!validationReport.length}
        />
      </div>

      <MinimizeReport report={validationReport ?? []} />

      {minimizeTriggered && isTableValid && (
        <>
          {minimizedFunctions.length > 0 && (
            <KarnaughMapViewer inputCount={formValues.inputs ?? 1} tableData={tableData} minimizedFunctions={minimizedFunctions} />
          )}

          <MinimizedResult
            inputCount={formValues.inputs ?? 1}
            outputCount={formValues.outputs ?? 1}
            tableData={tableData}
            onResult={handleMinimizationResult}
          />

          <AutoGeneratedGateLayout minimizedFunctions={minimizedFunctions} />
        </>
      )}
    </div>
  );
};

export default LogicMinimizer;
