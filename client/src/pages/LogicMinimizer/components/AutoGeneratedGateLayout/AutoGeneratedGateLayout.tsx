import React, { memo, useCallback, useEffect, useRef, useState } from 'react';
import { applyNodeChanges, Background, Controls, Node, Edge, NodeChange, ReactFlow, ReactFlowProvider } from '@xyflow/react';
import { nodeTypes } from '@/shared/types/nodeTypes';
import AnimatedSVGEdge from '@/shared/components/LogicGateNode/AnimatedSVGEdge';

interface AutoGeneratedGateLayoutProps {
  minimizedFunctions: { label: string; expression: string }[];
}

export const AutoGeneratedGateLayout: React.FC<AutoGeneratedGateLayoutProps> = ({ minimizedFunctions }) => {
  const [nodes, setNodes] = useState<Node[]>([]);
  const [edges, setEdges] = useState<Edge[]>([]);
  const workerRef = useRef<Worker | null>(null);

  const snapGrid: [number, number] = [10, 10];

  useEffect(() => {
    if (!minimizedFunctions || minimizedFunctions.length === 0) return;

    if (!workerRef.current) {
      workerRef.current = new Worker(new URL('./AutoGeneratedGateLayoutWorker.ts', import.meta.url), { type: 'module' });
    }

    const worker = workerRef.current;
    worker.postMessage({ minimizedFunctions });

    worker.onmessage = (event) => {
      const { updatedNodes, updatedEdges } = event?.data ?? {};
      if (!updatedNodes || !updatedEdges) return;

      setNodes(updatedNodes);
      setEdges(updatedEdges);
    };

    return () => {
      worker.terminate();
      workerRef.current = null;
    };
  }, [minimizedFunctions]);

  const edgeTypes = {
    animatedSvg: AnimatedSVGEdge,
  };

  const onNodesChange = useCallback((changes: NodeChange<Node>[]) => setNodes((nds: Node[]) => applyNodeChanges(changes, nds)), [setNodes]);

  return (
    <div style={{ width: '100%', height: '600px' }} className="rounded border bg-white">
      <ReactFlowProvider>
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          edgeTypes={edgeTypes}
          fitView
          nodeTypes={nodeTypes}
          defaultEdgeOptions={{ style: { strokeWidth: 8 } }}
          snapToGrid={true}
          snapGrid={snapGrid}
        >
          <Controls />
          <Background />
        </ReactFlow>
      </ReactFlowProvider>
    </div>
  );
};

export default memo(AutoGeneratedGateLayout);
